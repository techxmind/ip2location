package ip2location

import (
	"testing"
)

func TestGet(t *testing.T) {
	tests := []struct {
		ip       string
		location Location
		err      error
	}{
		{
			ip: "101.88.101.103",
			location: Location{
				Country:       "中国",
				Province:      "上海",
				City:          "上海",
				GeoID:         "156002000000",
				ChinaRegionID: "310000",
			},
		},
		{
			ip: "120.35.129.89",
			location: Location{
				Country:       "中国",
				Province:      "福建",
				City:          "宁德",
				GeoID:         "156015000007",
				ChinaRegionID: "350900",
			},
		},
		{
			ip: "112.239.133.129",
			location: Location{
				Country:       "中国",
				Province:      "山东",
				City:          "聊城",
				GeoID:         "156008000012",
				ChinaRegionID: "371500",
			},
		},
		{
			ip: "114.240.147.230",
			location: Location{
				Country:       "中国",
				Province:      "北京",
				City:          "北京",
				GeoID:         "156001000000",
				ChinaRegionID: "110000",
			},
		},
		{
			ip: "119.4.57.27",
			location: Location{
				Country:       "中国",
				Province:      "四川",
				City:          "成都",
				GeoID:         "156011000001",
				ChinaRegionID: "510100",
			},
		},
		{
			ip: "183.61.14.36",
			location: Location{
				Country:       "中国",
				Province:      "广东",
				City:          "珠海",
				GeoID:         "156005000008",
				ChinaRegionID: "440400",
			},
		},
		{
			ip: "60.246.218.221",
			location: Location{
				Country:       "中国",
				Province:      "澳门",
				City:          "",
				GeoID:         "446034000000",
				ChinaRegionID: "820000",
			},
		},
		{
			ip: "139.162.120.65",
			location: Location{
				Country:       "日本",
				Province:      "日本",
				City:          "",
				GeoID:         "392000000000",
				ChinaRegionID: "",
			},
		},
		{
			ip:  "a.b.c.d",
			err: ErrInvalidIp,
		},
	}

	for _, test := range tests {
		loc, err := Get(test.ip)
		if err != test.err {
			t.Errorf("error mismatch:%s", test.ip)
		}
		if loc != nil {
			if *loc != test.location {
				t.Errorf("location mismatch:want=%v actual=%v", test.location, *loc)
			}
		}
	}
}

func BenchmarkGet(b *testing.B) {
	var ips = []string{
		"101.88.101.103",
		"1.192.44.140",
		"112.92.155.185",
		"61.149.31.140",
		"112.252.80.33",
		"61.173.232.169",
		"115.62.2.7",
		"114.240.147.230",
		"111.37.1.8",
		"123.13.202.20",
		"218.26.228.30",
		"42.48.173.238",
		"221.194.156.254",
		"223.10.7.27",
		"121.16.79.36",
		"60.23.52.34",
		"120.128.2.147",
		"114.240.43.123",
		"124.236.90.87",
		"113.231.203.17",
		"112.239.133.129",
		"120.35.129.89",
		"182.203.112.175",
		"222.79.132.157",
		"182.245.242.220",
		"221.214.213.116",
		"182.245.242.220",
		"116.117.148.121",
		"61.185.42.58",
		"61.185.42.58",
		"182.245.242.220",
		"218.87.163.230",
		"112.194.100.38",
		"182.245.242.220",
		"183.38.238.185",
		"123.123.162.83",
		"117.24.50.181",
		"222.141.66.205",
		"113.140.43.162",
		"113.140.43.162",
		"175.4.83.161",
		"119.115.0.14",
		"112.114.152.78",
		"118.253.91.207",
		"119.116.215.190",
		"119.255.1.21",
		"125.64.152.47",
		"125.64.152.47",
		"183.63.204.195",
		"220.186.45.142",
		"183.248.131.206",
		"101.19.48.97",
		"221.193.204.19",
		"115.219.112.226",
		"101.19.48.97",
		"123.153.218.108",
		"58.21.232.5",
		"122.137.28.217",
		"114.223.91.113",
		"122.95.111.181",
		"60.175.242.109",
		"111.224.239.149",
		"119.84.184.160",
		"220.189.138.110",
		"183.163.204.187",
		"183.30.44.254",
		"219.146.166.178",
		"115.203.101.94",
		"59.48.133.18",
		"59.172.96.131",
		"119.4.57.27",
		"175.111.46.110",
		"175.111.46.110",
		"110.83.26.48",
		"110.83.26.48",
		"183.61.14.36",
		"120.128.2.237",
		"112.251.52.45",
		"113.1.68.184",
		"120.128.2.237",
		"124.73.182.237",
		"1.56.13.249",
		"211.93.6.78",
		"123.15.145.134",
		"220.168.78.18",
		"125.119.203.93",
		"113.143.136.174",
		"222.73.76.253",
		"110.17.142.32",
		"118.125.198.117",
		"118.125.198.117",
		"123.15.85.226",
		"112.192.65.114",
		"60.246.218.221",
		"60.246.218.221",
		"183.203.228.83",
		"113.237.30.86",
		"183.158.7.226",
		"112.245.37.51",
		"183.203.228.83",
		"112.192.65.114",
	}

	n := len(ips)

	for i := 0; i < b.N; i++ {
		if _, err := Get(ips[i%n]); err != nil {
			b.Fatalf("get error:%v", err)
		}
	}
}
